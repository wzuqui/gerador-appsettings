<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ import namespace="System.Linq" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace GeradorAppSettings.Configurations;

<#
    var xCurrentDirectory =   Path.GetDirectoryName(Host.TemplateFile);
    var xProjectRoot = Path.Combine($"{xCurrentDirectory}", @"..\");
    var xJsonPath = Path.Combine(xProjectRoot, "appsettings.json");
    var xJsonText = File.ReadAllText(xJsonPath);
    var xRoot = JObject.Parse(xJsonText);

    GenerateClass("AppSettings", xRoot);

    void GenerateClass(string pClassName, JObject pNode, int pIndent = 0)
    {
        var xIndentStr = new string(' ', pIndent * 4);

        WriteLine($"{xIndentStr}public class {pClassName}");
        WriteLine($"{xIndentStr}{{");

        foreach (var xProperty in pNode.Properties())
        {
            var xPropertyName = xProperty.Name;
            var xValue = xProperty.Value;

            switch (xValue.Type)

            {
                case JTokenType.Object:
                {
                    var xClassType = $"{xPropertyName}Configuration";
                    WriteLine($"{xIndentStr}    public required {xClassType} {xPropertyName} {{ get; init; }}");
                    GenerateClass(xClassType, (JObject)xValue, pIndent + 1);
                    break;
                }
                case JTokenType.Array:
                {
                    var xItemType = InferArrayType(xPropertyName, (JArray)xValue, pIndent + 1);
                    WriteLine($"{xIndentStr}    public required List<{xItemType}> {xPropertyName} {{ get; init; }}");
                    break;
                }
                case JTokenType.None:
                case JTokenType.Constructor:
                case JTokenType.Property:
                case JTokenType.Comment:
                case JTokenType.Integer:
                case JTokenType.Float:
                case JTokenType.String:
                case JTokenType.Boolean:
                case JTokenType.Null:
                case JTokenType.Undefined:
                case JTokenType.Date:
                case JTokenType.Raw:
                case JTokenType.Bytes:
                case JTokenType.Guid:
                case JTokenType.Uri:
                case JTokenType.TimeSpan:
                default:
                {
                    var xType = InferType(xValue);
                    WriteLine($"{xIndentStr}    public required {xType} {xPropertyName} {{ get; init; }}");
                    break;
                }
            }
        }

        WriteLine($"{xIndentStr}}}");
        WriteLine("");
    }

    string InferType(JToken pValue)
    {
        var xRetorno = pValue.Type switch
        {
            JTokenType.Integer => "int",
            JTokenType.Float => "double",
            JTokenType.Boolean => "bool",
            JTokenType.String => "string",
            JTokenType.Date => "DateTime",
            JTokenType.Guid => "Guid",
            JTokenType.TimeSpan => "TimeSpan",
            _ => "object"
        };
        return xRetorno;
    }

    string InferArrayType(string pPropertyName, JArray pArray, int pIndent = 0)
    {
        var xTypes = pArray.Select(InferType).ToList();
        var xType = xTypes.GroupBy(p => p, (pType, pItens) => new
            {
                Type = pType,
                Count = pItens.Count()
            })
            .OrderByDescending(p => p.Count)
            .Select(p => p.Type)
            .First();

        if (xType != "object")
            return xType;

        xType = $"{pPropertyName}Item";
        GenerateClass(xType, (JObject)pArray.First(), pIndent);
        return xType;
    }
#>